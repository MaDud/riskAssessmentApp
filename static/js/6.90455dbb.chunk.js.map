{"version":3,"sources":["containers/Authentication/authentication.module.css","containers/Authentication/Authentication.js"],"names":["module","exports","SignUp","state","controls","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","email","isEmail","password","isValid","isSignUp","inputHandler","e","id","changedField","target","validityCheck","setState","formValidationCheck","rule","trim","length","test","Object","keys","filter","control","forEach","signChange","props","cleanError","signProcess","data","signUp","signIn","this","formData","form","map","key","changed","className","classes","RegisterForm","error","btnType","disabled","clicked","onClick","React","Component","connect","authentication","dispatch","action"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,aAAe,uC,4JCO3BC,E,4MAEFC,MAAQ,CACJC,SACI,CAACC,KAAM,CACHC,YAAa,QACbC,cAAe,CACXC,KAAM,OACNC,YAAa,aAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVC,UAAW,GAEfC,OAAO,GAEXC,MAAO,CACHT,YAAa,QACbC,cAAe,CACXC,KAAM,QACNC,YAAa,UAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVI,SAAS,GACbF,OAAO,GAEXG,SAAU,CACNX,YAAa,QACbC,cAAe,CACXC,KAAM,WACNC,YAAa,+BAEjBC,MAAO,GACPC,WAAY,CACRC,UAAU,EACVC,UAAW,GAEfC,OAAO,IAEfI,SAAS,EACTC,UAAU,G,EAOdC,aAAe,SAACC,EAAGC,GACf,IAAMlB,EAAW,EAAKD,MAAMC,SACtBmB,EAAenB,EAASkB,GAC9BC,EAAab,MAAQW,EAAEG,OAAOd,MAC9Ba,EAAaT,MAAQ,EAAKW,cAAcJ,EAAEG,OAAOd,MAAO,EAAKP,MAAMC,SAASkB,GAAIX,YAEhF,EAAKe,SAAS,CAACtB,SAASA,EACRc,QAAS,EAAKS,yB,EAGlCF,cAAgB,SAACf,EAAOkB,GACpB,IAAIV,GAAU,EAQd,GANIU,EAAKhB,WACLM,EAA2B,KAAjBR,EAAMmB,QAAiBX,GAEjCU,EAAKf,YACLK,EAAUR,EAAMoB,QAAUF,EAAKf,WAAaK,GAE5CU,EAAKZ,QAAS,CAEdE,EADiB,wIACCa,KAAKrB,IAAUQ,EAErC,OAAOA,G,EAGXS,oBAAsB,WAClB,IAAIT,GAAU,EAYd,OAVAc,OAAOC,KAAK,EAAK9B,MAAMC,UAClB8B,QAAO,SAAAC,GACJ,OAAO,EAAKhC,MAAMC,SAAS+B,GAASxB,WAAWC,YAClDwB,SAAQ,SAAAD,GAEDjB,KADA,EAAKf,MAAMC,SAAS+B,GAASrB,QAASI,MAM3CA,G,EAGXmB,WAAa,WACT,IAAIjC,EAAQ,eAAO,EAAKD,MAAMC,UAE9BA,EAASC,KAAT,2BAAoB,EAAKF,MAAMC,SAASC,MAAxC,IACoBM,WAAW,2BAAK,EAAKR,MAAMC,SAASC,KAAKM,YAA/B,IACEC,UAAW,EAAKT,MAAMC,SAASC,KAAKM,WAAWC,WAC3DE,OAAQ,EAAKX,MAAMC,SAASC,KAAKS,QAErD,EAAKY,SAAS,CAACtB,SAAUA,EACTe,UAAW,EAAKhB,MAAMgB,SACtBD,QAAS,EAAKS,wBAC9B,EAAKW,MAAMC,c,EAGfC,YAAc,WACV,IAAMC,EAAO,CAAC1B,MAAO,EAAKZ,MAAMC,SAASW,MAAML,MAAOO,SAAU,EAAKd,MAAMC,SAASa,SAASP,OAEzF,EAAKP,MAAMgB,SACX,EAAKmB,MAAMI,OAAOD,EAAM,EAAKtC,MAAMC,SAASC,KAAKK,OAEjD,EAAK4B,MAAMK,OAAOF,I,kEAjEtBG,KAAKN,MAAMC,e,+BAqEJ,IAAD,OAEAM,EAAWD,KAAKzC,MAAMC,SACtB0C,EAAOd,OAAOC,KAAKY,GACpBX,QAAQ,SAAAC,GACL,OAAOU,EAASV,GAASxB,WAAWC,YACvCmC,KAAK,SAAAZ,GACF,OAAO,kBAAC,IAAD,CAAO7B,YAAeuC,EAASV,GAAS7B,YACnC0C,IAAOb,EACP3B,KAAQqC,EAASV,GAAS5B,cAAcC,KACxCC,YAAeoC,EAASV,GAAS5B,cAAcE,YAC/CwC,QAAW,SAAA5B,GAAC,OAAI,EAAKD,aAAaC,EAAGc,IACrCzB,MAASmC,EAASV,GAASzB,WAI/C,OACI,kBAAC,IAAD,KACI,yBAAKwC,UAAaC,IAAQC,cACtB,4BACKR,KAAKzC,MAAMgB,SAAW,wBAA0B,oBAEpDyB,KAAKN,MAAMe,MAAQ,6BAAMT,KAAKN,MAAMe,OAAe,KACnDP,EACD,kBAAC,IAAD,CAAQQ,QAAU,SAASC,UAAaX,KAAKzC,MAAMe,QAASsC,QAAS,kBAAM,EAAKhB,gBAC3EI,KAAKzC,MAAMgB,SAAW,uBAAoB,oBAE/C,2BACKyB,KAAKzC,MAAMgB,SAAW,4BAAyB,uBAChD,0BAAMsC,QAAS,kBAAM,EAAKpB,eACrBO,KAAKzC,MAAMgB,SAAW,mBAAgB,+B,GAlJ9CuC,IAAMC,WAyKZC,uBAdS,SAAAzD,GACpB,MAAO,CACHkD,MAAOlD,EAAM0D,eAAeR,UAIT,SAAAS,GACvB,MAAO,CACHnB,OAAQ,SAAAF,GAAI,OAAIqB,EAASC,IAActB,KACvCC,OAAQ,SAACD,EAAMpC,GAAP,OAAgByD,EAASC,IAActB,EAAMpC,KACrDkC,WAAY,kBAAMuB,EAASC,WAIpBH,CAA6C1D","file":"static/js/6.90455dbb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"RegisterForm\":\"authentication_RegisterForm__1Fx5g\"};","import React from 'react';\r\nimport Auxiliary from '../../hoc/Auxiliary';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './authentication.module.css';\r\nimport {connect} from 'react-redux';\r\nimport * as action from '../../store/actions/index';\r\n\r\nclass SignUp extends React.Component {\r\n\r\n    state = {\r\n        controls: \r\n            {name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Imię'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: false,\r\n                    minLength: 1\r\n                },\r\n                valid: true\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'E-mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true},\r\n                valid: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Hasło min. 8 znaków'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 8\r\n                },\r\n                valid: false\r\n            }},\r\n        isValid: false,\r\n        isSignUp: false\r\n    } \r\n\r\n    componentDidMount () {\r\n        this.props.cleanError()\r\n    }\r\n\r\n    inputHandler = (e, id) => {\r\n        const controls = this.state.controls;\r\n        const changedField = controls[id];\r\n        changedField.value = e.target.value;\r\n        changedField.valid = this.validityCheck(e.target.value, this.state.controls[id].validation);\r\n\r\n        this.setState({controls:controls,\r\n                        isValid: this.formValidationCheck()})\r\n    }\r\n\r\n    validityCheck = (value, rule) => {\r\n        let isValid = true;\r\n\r\n        if (rule.required) {\r\n            isValid = value.trim() !== '' && isValid\r\n        }\r\n        if (rule.minLength) {\r\n            isValid = value.length >= rule.minLength && isValid\r\n        }\r\n        if (rule.isEmail) {\r\n            const pattern =  /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(value) && isValid\r\n        }\r\n        return isValid\r\n    }\r\n\r\n    formValidationCheck = () => {\r\n        let isValid = true;\r\n\r\n        Object.keys(this.state.controls)\r\n            .filter(control => {\r\n                return this.state.controls[control].validation.required})\r\n            .forEach(control => {\r\n                if (this.state.controls[control].valid && isValid) {\r\n                    isValid = true\r\n                } else {\r\n                    isValid = false\r\n                }\r\n            })\r\n        return isValid\r\n    }\r\n\r\n    signChange = () => {\r\n        let controls = {...this.state.controls};\r\n\r\n        controls.name = {...this.state.controls.name,\r\n                            validation: {...this.state.controls.name.validation,\r\n                                        required: !this.state.controls.name.validation.required},\r\n                            valid: !this.state.controls.name.valid}\r\n\r\n        this.setState({controls: controls,\r\n                        isSignUp: !this.state.isSignUp,\r\n                        isValid: this.formValidationCheck()})\r\n        this.props.cleanError();\r\n    }\r\n\r\n    signProcess = () => {\r\n        const data = {email: this.state.controls.email.value, password: this.state.controls.password.value};\r\n\r\n        if (this.state.isSignUp) {\r\n            this.props.signUp(data, this.state.controls.name.value)\r\n        } else {\r\n            this.props.signIn(data)\r\n        }\r\n    }\r\n\r\n    render () {\r\n        \r\n        const formData = this.state.controls;\r\n        const form = Object.keys(formData)\r\n            .filter( control => {\r\n                return formData[control].validation.required})\r\n            .map( control => {\r\n                return <Input elementType = {formData[control].elementType}\r\n                            key = {control}\r\n                            type = {formData[control].elementConfig.type}\r\n                            placeholder = {formData[control].elementConfig.placeholder}\r\n                            changed = {e => this.inputHandler(e, control)}\r\n                            value = {formData[control].value}\r\n                        />\r\n            })\r\n\r\n        return (\r\n            <Auxiliary>\r\n                <div className = {classes.RegisterForm}>\r\n                    <h3>\r\n                        {this.state.isSignUp ? 'Formularz rejestracji' : 'Zaloguj się'}\r\n                    </h3>\r\n                    {this.props.error ? <div>{this.props.error}</div> : null}\r\n                    {form}\r\n                    <Button btnType = 'Submit' disabled = {!this.state.isValid} clicked={() => this.signProcess()}>\r\n                        {this.state.isSignUp ? 'Zarejestruj się' : 'Zaloguj się'}\r\n                    </Button>\r\n                    <p>\r\n                        {this.state.isSignUp ? 'Posiadasz już konto?' : 'Nie posiadasz konta?'}\r\n                        <span onClick={() => this.signChange()}>\r\n                            {this.state.isSignUp ? 'Zaloguj się' : 'Zarejestruj się'}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n            </Auxiliary>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        error: state.authentication.error\r\n    }\r\n}\r\n\r\nconst mapPropsToDispatch = dispatch => {\r\n    return {\r\n        signIn: data => dispatch(action.signIn(data)),\r\n        signUp: (data, name) => dispatch(action.signUp(data, name)),\r\n        cleanError: () => dispatch(action.cleanError())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapPropsToDispatch)(SignUp)"],"sourceRoot":""}